name: Clean Compile and Run

on:
  workflow_run:
    workflows: ["Scala CI"]
    types:
      - completed
  workflow_dispatch:  # Allows manual triggering

jobs:
  compile-and-run:
    runs-on: ubuntu-latest
    # Only run if the Scala CI workflow succeeded or this was manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive  # Fetches all submodules recursively
      
    # Set up minimal environment for running the application
    - name: Set up JDK 17
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'sbt'
        
    - name: Install sbt (only for manual trigger)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y curl gnupg
        echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x99E82A75642AC823" | sudo apt-key add
        sudo apt-get update
        sudo apt-get install sbt
    
    # For workflow_run triggers, download artifacts from the previous workflow
    - name: Download target directory from previous workflow
      if: ${{ github.event_name == 'workflow_run' }}
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: scala.yml
        name: target-directory
        path: target/
        
    # For manual triggers, we need to compile from scratch
    - name: Clean compile (only for manual trigger)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: sbt clean compile
      
    - name: Stage application (only for manual trigger)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: sbt universal:stage
      
    - name: Check executable existence
      run: |
        if [ ! -f target/universal/stage/bin/overlord ]; then
          echo "ERROR: The overlord executable was not found at target/universal/stage/bin/overlord"
          echo "This could be because the universal:stage task did not run correctly."
          echo "Directory contents of target/universal/stage/bin:"
          ls -la target/universal/stage/bin/ || echo "Directory doesn't exist"
          echo "Directory contents of target/universal/stage:"
          ls -la target/universal/stage/ || echo "Directory doesn't exist"
          exit 1
        else
          echo "Found overlord executable at target/universal/stage/bin/overlord"
        fi
        
    - name: Ensure standard catalog exists
      run: |
        if [ ! -d "${HOME}/gagameosstd_catalog" ]; then
          echo "Standard catalog folder not found. Cloning from Git repository..."
          git clone https://github.com/DeanoC/gagameos_stdcatalog.git ${HOME}/gagameosstd_catalog
        else
          echo "Standard catalog folder already exists."
        fi

    - name: Ensure overlord_template_project exists
      run: |
        if [ ! -d "${HOME}/overlord_template_project" ]; then
          echo "overlord_template_project folder not found. Cloning from Git repository..."
          git clone https://github.com/DeanoC/overlord_template_project.git ${HOME}/overlord_template_project
        else
          echo "overlord_template_project folder already exists."
        fi

    - name: Prepare for template project run
      run: |
        # Make the overlord executable available
        mkdir -p ${HOME}/bin
        cp target/universal/stage/bin/overlord ${HOME}/bin/
        chmod +x ${HOME}/bin/overlord
        
        # Copy lib directory
        mkdir -p ${HOME}/lib
        cp -r target/universal/stage/lib/* ${HOME}/lib/
        
        # Add to PATH
        echo "${HOME}/bin" >> $GITHUB_PATH
        
    - name: Run template project
      run: |
        # Error handling
        set -e
        
        echo "Running template project with overlord using run.sh"
        
        # Check if run.sh exists and is executable
        if [ ! -f "overlord_template_project/run.sh" ]; then
          echo "ERROR: run.sh script not found"
          exit 1
        fi
      
        # Run the script
        cd overlord_template_project
        ./run.sh || {
          echo "Error: Template project execution failed"
          exit 1
        }
        
        echo "Template project completed successfully"